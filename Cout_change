#include <iostream>
#include <vector>
#include <set>
#include <map>

using namespace std;

template <typename Term>

ostream& operator<<(ostream& out, const set<Term>& container) {
    out << "{";
    for (const Term& element : container) {
        if (element == *container.rbegin()) {
            out << element;
        }
        else out << element << ", "s;
    }
    out << "}";
    return out;
}

template <typename Term>

ostream& operator<<(ostream& out, const vector<Term>& container) {
    out << "[";
    for (const Term& element : container) {
        if (element == container[container.size() - 1]) {
            out << element;
        }
        else out << element << ", "s;
    }
    out << "]";
    return out;
}

template <typename KEY, typename VALUE>

ostream& operator<<(ostream& out, const map<KEY, VALUE>& container) {
    out << "<";
    for (const auto& element : container) {
        if (element == *container.rbegin()) {
            out << "(" << element.first << ", "s << element.second << ")";
        }
        else out << "(" << element.first << ", "s << element.second << ")" << ", ";
    }
    out << ">";
    return out;
}

template <typename Type>

void Print(ostream& out, Type& data) {

    for (const auto& element : data) {
        if (element == *prev(data.end())) {
            out << element;
        }
        else out << element << ", "s;
    }
}

template <typename KEY, typename VALUE>

void Print(ostream& out, const map<KEY, VALUE>& data) {

    for (const auto& element : data) {
        if (element == *data.rbegin()) {
            out << "(" << element.first << ", "s << element.second << ")";
        }
        else out << "(" << element.first << ", "s << element.second << ")" << ", ";
    }
}



int main() {
    const vector<int> ages = { 10, 5, 2, 12 };
    cout << ages << endl;
    const set<string> cats = { "elfs"s, "orks"s, "dvorfs"s, "humans"s };
    cout << cats << endl;

    const map<string, int> cat_ages = {
    {"elfs"s, 10},
    {"orks"s, 5},
    {"dvorfs"s, 2},
    {"humans"s, 12}
    };
    cout << cat_ages << endl;

    Print(cout, ages);
    cout << endl;
    Print(cout, cats);
    cout << endl;
    Print(cout, cat_ages);
    system("pause>NULL");
    return 0;
}
/*
Вывод бля класса. При 
class Rational {
public:
    Rational() = default;

    Rational(int value)
        : numerator_(value)
        , denominator_(1) {
    }

    Rational(int numerator, int denominator)
        : numerator_(numerator)
        , denominator_(denominator)
    {
        Normalize();
    }

    int Numerator() const {
        return numerator_;
    }

    int Denominator() const {
        return denominator_;
    }

    Rational& operator+=(Rational right) {
        numerator_ = numerator_ * right.denominator_ + right.numerator_ * denominator_;
        denominator_ *= right.denominator_;
        Normalize();
        return *this;
    }

    Rational& operator-=(Rational right) {
        numerator_ = numerator_ * right.denominator_ - right.numerator_ * denominator_;
        denominator_ *= right.denominator_;
        Normalize();
        return *this;
    }

    Rational& operator*=(Rational right) {
        numerator_ *= right.numerator_;
        denominator_ *= right.denominator_;
        Normalize();
        return *this;
    }

    Rational& operator/=(Rational right) {
        numerator_ *= right.denominator_;
        denominator_ *= right.numerator_;
        Normalize();
        return *this;
    }

private:
    void Normalize() {
        if (denominator_ < 0) {
            numerator_ = -numerator_;
            denominator_ = -denominator_;
        }
        int n = gcd(numerator_, denominator_);
        numerator_ /= n;
        denominator_ /= n;
    }

    int numerator_ = 0;
    int denominator_ = 1;
};

ostream& operator<<(ostream& output, Rational rational) {
    return output << rational.Numerator() << '/' << rational.Denominator();
}

istream& operator>>(istream& input, Rational& rational) {
    int numerator;
    int denominator;
    char slash;
    if ((input >> numerator) && (input >> slash) && (slash == '/') && (input >> denominator)) {
        rational = Rational{numerator, denominator};
    }
    return input;
}

Rational operator+(Rational value) {
    return value;
}

Rational operator-(Rational value) {
    return {-value.Numerator(), value.Denominator()};
}

Rational operator+(Rational left, Rational right) {
    return left += right;
}

Rational operator-(Rational left, Rational right) {
    return left -= right;
}

Rational operator*(Rational left, Rational right) {
    return left *= right;
}

Rational operator/(Rational left, Rational right) {
    return left /= right;
}

bool operator==(Rational left, Rational right) {
    return left.Numerator() == right.Numerator() &&
        left.Denominator() == right.Denominator();
}

bool operator!=(Rational left, Rational right) {
    return !(left == right);
}

bool operator<(Rational left, Rational right) {
    double A = (double)left.Numerator() / (double)left.Denominator();
    double B = (double)right.Numerator() / (double)right.Denominator();
    return A < B;
}

bool operator>(Rational left, Rational right) {
    double A = (double)left.Numerator() / (double)left.Denominator();
    double B = (double)right.Numerator() / (double)right.Denominator();
    return A > B;
}

bool operator<=(Rational left, Rational right) {
    double A = (double)left.Numerator() / (double)left.Denominator();
    double B = (double)right.Numerator() / (double)right.Denominator();
    return A <= B;
}

bool operator>=(Rational left, Rational right) {
    double A = (double)left.Numerator() / (double)left.Denominator();
    double B = (double)right.Numerator() / (double)right.Denominator();
    return A >= B;
}
*/
