#include <iostream>
#include <stdexcept>
#include <vector>

using namespace std;

ostream& operator<<(ostream& output, vector<int> Vec) {
    cout << "{ ";
    for (auto Elem_vec: Vec) {
        cout << Elem_vec << " ";
    }
    cout << "}";
    return output;
}

class Tower {
public:

    Tower(int disks_num) {
        FillTower(disks_num);
    }

    int GetDisksNum() const {
        return disks_.size();
    }

    void SetDisks(int disks_num) {
        FillTower(disks_num);
    }

    void showdisk() {
        cout << disks_;
    }
    void RemuveDisk(int disk) {
        cout << "|" << &this->disks_ << "|" << endl;
        this->disks_.pop_back();
    }

    void AddToTop(int disk) {
        int top_disk_num = disks_.size() - 1;
        cout << disk << " " << disks_ << &this->disks_;
        if (0 != disks_.size() && disk >= disks_[top_disk_num]) {
            throw invalid_argument(" - ERROR");
        }
        else {
            disks_.push_back(disk);
            cout << disks_ << endl;
        }
    }

    void MoveDisks(int disks_num, Tower& destination, Tower& buffer) {
        bool del = false;
        try {
            if (disks_num != 0) {
                this->MoveDisks(disks_num - 1, buffer, destination);
                cout << "buffer = " << &buffer << " destination = " << &destination << endl;
                destination.AddToTop(disks_num);
                this->RemuveDisk(disks_num);
                buffer.MoveDisks(disks_num - 1, destination, *this);
                cout << "buffer = " << &buffer << " destination = " << &destination << " ************** " << endl;
            }
        }
        catch (const invalid_argument& err) {
            cout << err.what() << endl;
        }
    }

private:
    vector<int> disks_;
    void FillTower(int disks_num) {
        for (int i = disks_num; i > 0; i--) {
            disks_.push_back(i);
        }
    }
};

void SolveHanoi(vector<Tower>& towers) {
    int disks_num = towers[0].GetDisksNum();
    cout << "towers[0] -" << &towers[0] << endl;
    cout << "towers[1] -" << &towers[1] << endl;
    cout << "towers[2] -" << &towers[2] << endl;
    cout << endl << "------0-------" << endl;
    towers[0].showdisk();
    cout << endl << "------1-------" << endl;
    towers[1].showdisk();
    cout << endl << "------2-------" << endl;
    towers[2].showdisk();
    cout << endl <<endl;
    towers[0].MoveDisks(disks_num, towers[2], towers[1]);
    cout << endl << "------0-------" << endl;
    towers[0].showdisk();
    cout << endl << "------1-------" << endl;
    towers[1].showdisk();
    cout << endl << "------2-------" << endl;
    towers[2].showdisk();
}

int main() {
    int towers_num = 3;
    int disks_num = 4;
    vector<Tower> towers;
    for (int i = 0; i < towers_num; ++i) {
        towers.push_back(0);
    }
    towers[0].SetDisks(disks_num);
    SolveHanoi(towers);
    system("pause>NULL");
}
